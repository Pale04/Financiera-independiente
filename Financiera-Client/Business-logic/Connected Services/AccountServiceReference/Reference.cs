//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Response", Namespace="http://schemas.datacontract.org/2004/07/FinancieraServer.DataContracts")]
    public partial class Response : object
    {
        
        private string MessageField;
        
        private int StatusCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusCode
        {
            get
            {
                return this.StatusCodeField;
            }
            set
            {
                this.StatusCodeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountServiceReference.IAccountService")]
    public interface IAccountService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/createAccount", ReplyAction="http://tempuri.org/IAccountService/createAccountResponse")]
        AccountServiceReference.Response createAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/createAccount", ReplyAction="http://tempuri.org/IAccountService/createAccountResponse")]
        System.Threading.Tasks.Task<AccountServiceReference.Response> createAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/SendEmail", ReplyAction="http://tempuri.org/IAccountService/SendEmailResponse")]
        int SendEmail(string mail, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/SendEmail", ReplyAction="http://tempuri.org/IAccountService/SendEmailResponse")]
        System.Threading.Tasks.Task<int> SendEmailAsync(string mail, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/ChangePassword", ReplyAction="http://tempuri.org/IAccountService/ChangePasswordResponse")]
        AccountServiceReference.Response ChangePassword(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/ChangePassword", ReplyAction="http://tempuri.org/IAccountService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<AccountServiceReference.Response> ChangePasswordAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GenerateVerificationCode", ReplyAction="http://tempuri.org/IAccountService/GenerateVerificationCodeResponse")]
        string GenerateVerificationCode(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GenerateVerificationCode", ReplyAction="http://tempuri.org/IAccountService/GenerateVerificationCodeResponse")]
        System.Threading.Tasks.Task<string> GenerateVerificationCodeAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CheckVerificationCode", ReplyAction="http://tempuri.org/IAccountService/CheckVerificationCodeResponse")]
        bool CheckVerificationCode(string clientCode, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CheckVerificationCode", ReplyAction="http://tempuri.org/IAccountService/CheckVerificationCodeResponse")]
        System.Threading.Tasks.Task<bool> CheckVerificationCodeAsync(string clientCode, string user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IAccountServiceChannel : AccountServiceReference.IAccountService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<AccountServiceReference.IAccountService>, AccountServiceReference.IAccountService
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AccountServiceClient() : 
                base(AccountServiceClient.GetDefaultBinding(), AccountServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAccountService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccountServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(AccountServiceClient.GetBindingForEndpoint(endpointConfiguration), AccountServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccountServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AccountServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccountServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AccountServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public AccountServiceReference.Response createAccount()
        {
            return base.Channel.createAccount();
        }
        
        public System.Threading.Tasks.Task<AccountServiceReference.Response> createAccountAsync()
        {
            return base.Channel.createAccountAsync();
        }
        
        public int SendEmail(string mail, string code)
        {
            return base.Channel.SendEmail(mail, code);
        }
        
        public System.Threading.Tasks.Task<int> SendEmailAsync(string mail, string code)
        {
            return base.Channel.SendEmailAsync(mail, code);
        }
        
        public AccountServiceReference.Response ChangePassword(string user, string password)
        {
            return base.Channel.ChangePassword(user, password);
        }
        
        public System.Threading.Tasks.Task<AccountServiceReference.Response> ChangePasswordAsync(string user, string password)
        {
            return base.Channel.ChangePasswordAsync(user, password);
        }
        
        public string GenerateVerificationCode(string user)
        {
            return base.Channel.GenerateVerificationCode(user);
        }
        
        public System.Threading.Tasks.Task<string> GenerateVerificationCodeAsync(string user)
        {
            return base.Channel.GenerateVerificationCodeAsync(user);
        }
        
        public bool CheckVerificationCode(string clientCode, string user)
        {
            return base.Channel.CheckVerificationCode(clientCode, user);
        }
        
        public System.Threading.Tasks.Task<bool> CheckVerificationCodeAsync(string clientCode, string user)
        {
            return base.Channel.CheckVerificationCodeAsync(clientCode, user);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAccountService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAccountService))
            {
                return new System.ServiceModel.EndpointAddress("https://localhost:5001/AccountService.svc");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AccountServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAccountService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AccountServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAccountService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAccountService,
        }
    }
}
